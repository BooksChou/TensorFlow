import os
import tensorflow as tf
# 避免AVX2错误
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

# 计算滑动平均的变量必须是实数型
v1 = tf.Variable(0, dtype=tf.float32)
step = tf.Variable(0, trainable=False)

# 定义一个滑动平均的类   初始化给的decay=0.99    shadow_variable = decay x shadow_variable + (1-decay) x variable
# ExponentialMovingAverage中提供一个num_updates参数
# min｛decay，(1+num_updates)/(10+num_updates)}
ema = tf.train.ExponentialMovingAverage(0.99, step)

# 定义一个更新变量滑动平均的操作，给定一个可以被更新的列表
maintain_averages_op = ema.apply([v1])

sess = tf.Session()
# 初始化所有变量
init_op = tf.global_variables_initializer()
sess.run(init_op)

print(sess.run([v1, ema.average(v1)]))   # 输出[0.0， 0.0】

# 将v1的值更新到5
# 更新v1的滑动平均值  decay=in{(0.99,(1+step)/(10+step)}=0.1
# 所以v1的滑动平均更新为 0.1x0 + 0.9x5 = 4.5
sess.run(tf.assign(v1, 5))
sess.run(maintain_averages_op)
print(sess.run([v1, ema.average(v1)]))   # 输出[5.0, 4.5]

# 更新step的值为1000，v1的值为10
# 更新v1的滑动平均值  decay=in{(0.99,(1+step)/(10+step)}=0.99
# 所以v1的滑动平均更新为  0.99x4.5 + 0.01x10 = 4.555
sess.run(tf.assign(step, 1000))
sess.run(tf.assign(v1, 10))
sess.run(maintain_averages_op)
print(sess.run([v1, ema.average(v1)]))   # 输出[10.0, 4.555]

# 再次更新滑动平均值
sess.run(maintain_averages_op)
print(sess.run([v1, ema.average(v1)]))   # 输出[10.0, 4.60945]
