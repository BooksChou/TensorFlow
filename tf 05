import tensorflow as tf


# Numpy是Python的一个科学计算工具包，这里通过其生成模拟数据集
from numpy.random import RandomState


# 忽略CPU无法支持AVX拓展警告
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'


# 定义batch大小
batch_size = 8


# 定义神经网络的参数
w1 = tf.Variable(tf.random_normal([2, 3], stddev=1, seed=1))
w2 = tf.Variable(tf.random_normal([3, 1], stddev=1, seed=1))
biases1 = -0.5
biases2 = 0.1


# 在shape的一个维度上使用None可以方便使用不同的batch大小
x = tf.placeholder(tf.float32, shape=(None, 2), name='x-input')
y_ = tf.placeholder(tf.float32, shape=(None, 1), name='y-input')


# 定义神经网络的前向传播过程
a = tf.nn.relu(tf.tanh(tf.matmul(x, w1) + biases1))
y = tf.nn.relu(tf.tanh(tf.matmul(a, w2) + biases2))


# 使用sigmoid函数将y转换成0~1之间的数值，转换后的y代表正样本的概率，1-y代表负样本的概率
# 定义损失函数(刻画预测值和真实值的差距)和反向传播算法。
y = tf.sigmoid(y)
cross_entropy = -tf.reduce_mean(
    y_ * tf.log(tf.clip_by_value(y, 1e-10, 1.0))
    + (1-y_)*tf.log(tf.clip_by_value(1-y, 1e-10, 1.0)))
train_step = tf.train.AdamOptimizer(0.001).minimize(cross_entropy)


# 通过随机数生成一个模拟数据集
rdm = RandomState(1)
data_set_size = 128
X = rdm.rand(data_set_size, 2)


# 定义x1+x2<1是合格零件的样本。在这里0,1分别表示负、正样本
Y = [[int(x1+x2 < 1)]for(x1, x2) in X]


# 创建一个会话来运行 tensorflow 程序
sess = tf.Session()
init_op = tf.global_variables_initializer()
sess.run(init_op)

print(sess.run(w1))
print(sess.run(w2))


# 设定训练轮数
STEPS = 5001
delay = 100
for i in range(STEPS):
    # 每次选取batch_size大小个赝本进行训练
    start = (i * batch_size) % data_set_size
    end = min(start+batch_size, data_set_size)

    # 通过选取的样本训练神经网络并更新参数
    sess.run(train_step, feed_dict={x: X[start:end], y_: Y[start:end]})
    if i % 1000 == 0:
        # 每隔一段时间计算在所有数据上的交叉熵并输出
        total_cross_entropy = sess.run(
            cross_entropy, feed_dict={x: X[start:end], y_: Y[start:end]})
    print("After %d training step(s), cross entropy on all data is %g" % (i, total_cross_entropy))
# 结束会话
sess.close()
